// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BSuiteE2ERegressionTestSuite.Features.JobCreation
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Job Creation - Break Fix Job via different contracts - System Admin", new string[] {
            "AllTests",
            "BSuite",
            "BSuiteDesktop",
            "JobLogging",
            "SystemAdmin"}, Description="As a BSuite desktop User with role System Admin at Call Center\r\nI am able to add " +
        "a new Task/Job of Work Type Break-Fix for all Active Contracts in BSuite\r\nSo tha" +
        "t Customer issue can be taken up for resolution", SourceFile="Features\\Job Creation\\Job Creation - Break Fix Job via different contracts - Syst" +
        "em Admin.feature", SourceLine=1)]
    public partial class JobCreation_BreakFixJobViaDifferentContracts_SystemAdminFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "AllTests",
                "BSuite",
                "BSuiteDesktop",
                "JobLogging",
                "SystemAdmin"};
        
#line 1 "Job Creation - Break Fix Job via different contracts - System Admin.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Job Creation", "Job Creation - Break Fix Job via different contracts - System Admin", "As a BSuite desktop User with role System Admin at Call Center\r\nI am able to add " +
                    "a new Task/Job of Work Type Break-Fix for all Active Contracts in BSuite\r\nSo tha" +
                    "t Customer issue can be taken up for resolution", ProgrammingLanguage.CSharp, new string[] {
                        "AllTests",
                        "BSuite",
                        "BSuiteDesktop",
                        "JobLogging",
                        "SystemAdmin"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void JobCreation_BreakFixJobViaDifferentContracts_SystemAdmin(string contract, string site, string app_StartTime, string app_StartHour, string app_StartMinute, string app_EndTime, string app_EndHour, string app_EndMinute, string position, string part, string partStatus, string priority, string problemCategory, string problemCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GSQA-3",
                    "PositiveTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Contract", contract);
            argumentsOfScenario.Add("Site", site);
            argumentsOfScenario.Add("App. Start Time", app_StartTime);
            argumentsOfScenario.Add("App. Start Hour", app_StartHour);
            argumentsOfScenario.Add("App. Start Minute", app_StartMinute);
            argumentsOfScenario.Add("App. End Time", app_EndTime);
            argumentsOfScenario.Add("App. End Hour", app_EndHour);
            argumentsOfScenario.Add("App. End Minute", app_EndMinute);
            argumentsOfScenario.Add("Position", position);
            argumentsOfScenario.Add("Part", part);
            argumentsOfScenario.Add("Part Status", partStatus);
            argumentsOfScenario.Add("Priority", priority);
            argumentsOfScenario.Add("Problem Category", problemCategory);
            argumentsOfScenario.Add("Problem Code", problemCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Job Creation - Break Fix Job via different contracts - System Admin", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given("I have logged into BSuite \'Desktop\' portal as a User with role \'System Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.And("I have navigated to \'Call Centre\' page from the top menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table128.AddRow(new string[] {
                            "Contract/WorkType",
                            string.Format("{0}", contract)});
#line 14
 testRunner.And("I have navigated to \'Add Task\' page and entered details as follows", ((string)(null)), table128, "And ");
#line hidden
#line 17
 testRunner.And("I click the \'Add Task\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value/Action"});
                table129.AddRow(new string[] {
                            "Site",
                            string.Format("{0}", site)});
                table129.AddRow(new string[] {
                            "Contact",
                            "Abhy"});
                table129.AddRow(new string[] {
                            "App. Start Time",
                            string.Format("{0}", app_StartTime)});
                table129.AddRow(new string[] {
                            "App. Start Hour",
                            string.Format("{0}", app_StartHour)});
                table129.AddRow(new string[] {
                            "App. Start Minute",
                            string.Format("{0}", app_StartMinute)});
                table129.AddRow(new string[] {
                            "App. End Time",
                            string.Format("{0}", app_EndTime)});
                table129.AddRow(new string[] {
                            "App. End Hour",
                            string.Format("{0}", app_EndHour)});
                table129.AddRow(new string[] {
                            "App. End Minute",
                            string.Format("{0}", app_EndMinute)});
                table129.AddRow(new string[] {
                            "Serial Number",
                            "BSUITE800"});
                table129.AddRow(new string[] {
                            "Position",
                            "1"});
                table129.AddRow(new string[] {
                            "Part",
                            string.Format("{0}", part)});
                table129.AddRow(new string[] {
                            "Part Status",
                            string.Format("{0}", partStatus)});
                table129.AddRow(new string[] {
                            "Task Status",
                            "<Task Status>"});
                table129.AddRow(new string[] {
                            "Priority",
                            string.Format("{0}", priority)});
                table129.AddRow(new string[] {
                            "Client Ref #",
                            "BSUITE800"});
                table129.AddRow(new string[] {
                            "Problem Category",
                            string.Format("{0}", problemCategory)});
                table129.AddRow(new string[] {
                            "Problem Code",
                            string.Format("{0}", problemCode)});
                table129.AddRow(new string[] {
                            "Problem Desc",
                            "GSQA3 Regression Test"});
                table129.AddRow(new string[] {
                            "Client Notes",
                            "GSQA3 Regression Test"});
                table129.AddRow(new string[] {
                            "Call Centre Notes",
                            "GSQA3 Regression Test"});
#line 18
 testRunner.When("I enter the following details in the \'Add Task - FieldTask\' page", ((string)(null)), table129, "When ");
#line hidden
#line 40
 testRunner.And("I click the \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                            "Target",
                            "End Time"});
                table130.AddRow(new string[] {
                            "Creation Time",
                            "Current Time"});
                table130.AddRow(new string[] {
                            "TAKEN",
                            "Current Time + 0.5 hours"});
                table130.AddRow(new string[] {
                            "ONSITE",
                            "Current Time + 2 hours"});
                table130.AddRow(new string[] {
                            "CLOSED",
                            "Current Time + 14 hours"});
#line 41
 testRunner.Then("a new Field Task is saved with the following Client Targets", ((string)(null)), table130, "Then ");
#line hidden
#line 47
 testRunner.Then("I click the \'Finish\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Job Creation - Break Fix Job via different contracts - System Admin, ALH Group - " +
            "IT Support - Break Fix", new string[] {
                "GSQA-3",
                "PositiveTests"}, SourceLine=50)]
        public virtual void JobCreation_BreakFixJobViaDifferentContracts_SystemAdmin_ALHGroup_ITSupport_BreakFix()
        {
#line 8
this.JobCreation_BreakFixJobViaDifferentContracts_SystemAdmin("ALH Group - IT Support - Break Fix", "688", "2021-11-17", "02", "00", "2021-11-17", "02", "30", "1", "1000041", "Degraded", "1", "Unknown", "Unknown", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
