// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BSuiteE2ERegressionTestSuite.Features.JobCreation
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Job Creation - Break Fix Job via mobile - Field Technician", new string[] {
            "AllTests",
            "BSuite",
            "BSuite-Mobile",
            "Field-Technician",
            "Job-Creation"}, Description="As a BSuite Mobile User with Role Field Technician\r\n\tI am able to add a new Task/" +
        "Job of Work Type Break-Fix for all Active Contracts in BSuite\r\nSo that Customer " +
        "issue can be taken up for resolution", SourceFile="Features\\Job Creation\\Job Creation - Break Fix Job via mobile - Field Technician." +
        "feature", SourceLine=1)]
    public partial class JobCreation_BreakFixJobViaMobile_FieldTechnicianFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "AllTests",
                "BSuite",
                "BSuite-Mobile",
                "Field-Technician",
                "Job-Creation"};
        
#line 1 "Job Creation - Break Fix Job via mobile - Field Technician.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Job Creation", "Job Creation - Break Fix Job via mobile - Field Technician", "As a BSuite Mobile User with Role Field Technician\r\n\tI am able to add a new Task/" +
                    "Job of Work Type Break-Fix for all Active Contracts in BSuite\r\nSo that Customer " +
                    "issue can be taken up for resolution", ProgrammingLanguage.CSharp, new string[] {
                        "AllTests",
                        "BSuite",
                        "BSuite-Mobile",
                        "Field-Technician",
                        "Job-Creation"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void JobCreation_BreakFixJobViaMobile_FieldTechnician(string worktype, string site, string part, string position, string priority, string problemCategory, string problemCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GSQA-5",
                    "PositiveTests",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Worktype", worktype);
            argumentsOfScenario.Add("Site", site);
            argumentsOfScenario.Add("Part", part);
            argumentsOfScenario.Add("Position", position);
            argumentsOfScenario.Add("Priority", priority);
            argumentsOfScenario.Add("Problem Category", problemCategory);
            argumentsOfScenario.Add("Problem Code", problemCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Job Creation - Break Fix Job via mobile - Field Technician", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
 testRunner.Given("I have logged into BSuite \'Mobile\' portal as a User with role \'Field Technician\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.Then("login is successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("I have clicked \'Create Task\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value/Action"});
                table131.AddRow(new string[] {
                            "Worktype",
                            string.Format("{0}", worktype)});
                table131.AddRow(new string[] {
                            "Site",
                            string.Format("{0}", site)});
                table131.AddRow(new string[] {
                            "Serial No",
                            "05"});
                table131.AddRow(new string[] {
                            "Part",
                            string.Format("{0}", part)});
                table131.AddRow(new string[] {
                            "Position",
                            string.Format("{0}", position)});
                table131.AddRow(new string[] {
                            "Priority",
                            string.Format("{0}", priority)});
                table131.AddRow(new string[] {
                            "Problem Category",
                            string.Format("{0}", problemCategory)});
                table131.AddRow(new string[] {
                            "Problem Code",
                            string.Format("{0}", problemCode)});
                table131.AddRow(new string[] {
                            "Problem Description",
                            "GSQA 5"});
#line 16
 testRunner.When("I enter the following details in the \'Create Fieldtask\' page", ((string)(null)), table131, "When ");
#line hidden
#line 27
 testRunner.And("I have clicked \'Create Task\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("I fetch the successfully created Task Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("I have clicked \'« Back\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("I have clicked \'Task #\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("I am required to select the created task using the task number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.Then(string.Format("I verify that the Task details of \'{0}\',\'{1}\'", worktype, site), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Job Creation - Break Fix Job via mobile - Field Technician, ALH Group - IT Suppor" +
            "t - Break Fix", new string[] {
                "GSQA-5",
                "PositiveTests"}, SourceLine=35)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void JobCreation_BreakFixJobViaMobile_FieldTechnician_ALHGroup_ITSupport_BreakFix()
        {
#line 8
this.JobCreation_BreakFixJobViaMobile_FieldTechnician("ALH Group - IT Support - Break Fix", "688", "1000041", "1", "1", "Unknown", "Unknown", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
