// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BSuiteE2ERegressionTestSuite.Features.Parts
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Parts - Create Purchase Order - State Supply Chain Manager", new string[] {
            "AllTests",
            "BSuite",
            "BSuite-Website",
            "State-Supply-Chain-Manager",
            "Parts",
            "Purchase-order"}, Description="As a BSuite Desktop User with Role State Supply Chain Manager\r\nI am able to creat" +
        "e a Purchase Order in BSuite", SourceFile="Features\\Parts\\Parts - Create Purchase Order - State Supply Chain Manager.feature" +
        "", SourceLine=1)]
    public partial class Parts_CreatePurchaseOrder_StateSupplyChainManagerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "AllTests",
                "BSuite",
                "BSuite-Website",
                "State-Supply-Chain-Manager",
                "Parts",
                "Purchase-order"};
        
#line 1 "Parts - Create Purchase Order - State Supply Chain Manager.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Parts", "Parts - Create Purchase Order - State Supply Chain Manager", "As a BSuite Desktop User with Role State Supply Chain Manager\r\nI am able to creat" +
                    "e a Purchase Order in BSuite", ProgrammingLanguage.CSharp, new string[] {
                        "AllTests",
                        "BSuite",
                        "BSuite-Website",
                        "State-Supply-Chain-Manager",
                        "Parts",
                        "Purchase-order"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void Parts_CreatePurchaseOrder_StateSupplyChainManager(string purchaseOrderNo, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GSQA-77",
                    "PositiveTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Purchase Order No", purchaseOrderNo);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parts - Create Purchase Order - State Supply Chain Manager", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given("I have logged into BSuite \'Desktop\' portal as a User with role \'State Supply Chai" +
                        "n Manager\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.And("I have navigated to \'Purchase Orders\' page from the top menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("I click the \'Add New Purchase Order\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value/Action"});
                table147.AddRow(new string[] {
                            "Purchase Order No",
                            string.Format("{0}", purchaseOrderNo)});
                table147.AddRow(new string[] {
                            "Supplier Name",
                            "3rd Party Supplier"});
                table147.AddRow(new string[] {
                            "Order Status",
                            "ORDERED"});
                table147.AddRow(new string[] {
                            "Order Currency",
                            "AUD"});
                table147.AddRow(new string[] {
                            "Comments",
                            "This PO is created for regression testing purpose only. Not a real P.O"});
                table147.AddRow(new string[] {
                            "Part Type",
                            "1000000 : GMIC (GREY/BLUE)"});
                table147.AddRow(new string[] {
                            "Diss. Code",
                            "11.11.1111.11.11111"});
                table147.AddRow(new string[] {
                            "Quantity",
                            "1"});
                table147.AddRow(new string[] {
                            "Unit Cost (Ex. GST)",
                            "100"});
#line 15
 testRunner.And("I enter the following details in the \'Purchase Orders\' page", ((string)(null)), table147, "And ");
#line hidden
#line 26
 testRunner.And("I have clicked \'Add\' button on Desktop Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("I have clicked \'Save\' button on Desktop Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("I enter the successfully created Purchase Order No", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("I have clicked \'Search\' button on Desktop Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("I verify the Purchase Order created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Parts - Create Purchase Order - State Supply Chain Manager, BYT", new string[] {
                "GSQA-77",
                "PositiveTests"}, SourceLine=33)]
        public virtual void Parts_CreatePurchaseOrder_StateSupplyChainManager_BYT()
        {
#line 7
this.Parts_CreatePurchaseOrder_StateSupplyChainManager("BYT", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Parts - Create Purchase Order - State Supply Chain Manager, FS", new string[] {
                "GSQA-77",
                "PositiveTests"}, SourceLine=33)]
        public virtual void Parts_CreatePurchaseOrder_StateSupplyChainManager_FS()
        {
#line 7
this.Parts_CreatePurchaseOrder_StateSupplyChainManager("FS", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Parts - Create Purchase Order - State Supply Chain Manager, WS", new string[] {
                "GSQA-77",
                "PositiveTests"}, SourceLine=33)]
        public virtual void Parts_CreatePurchaseOrder_StateSupplyChainManager_WS()
        {
#line 7
this.Parts_CreatePurchaseOrder_StateSupplyChainManager("WS", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Parts - Create Purchase Order - State Supply Chain Manager, B00", new string[] {
                "GSQA-77",
                "PositiveTests"}, SourceLine=33)]
        public virtual void Parts_CreatePurchaseOrder_StateSupplyChainManager_B00()
        {
#line 7
this.Parts_CreatePurchaseOrder_StateSupplyChainManager("B00", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
