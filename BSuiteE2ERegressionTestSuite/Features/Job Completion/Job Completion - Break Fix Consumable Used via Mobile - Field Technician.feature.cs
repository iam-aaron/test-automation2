// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BSuiteE2ERegressionTestSuite.Features.JobCompletion
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Job Completion - Break Fix Consumable Used via Mobile - Field Technician", new string[] {
            "AllTests",
            "BSuite",
            "Bsuite-Mobile",
            "Job-Completion",
            "Field-Technician"}, Description="\tAs a User with role Field Technician accessing BSuite Mobile portal,\r\nI am able " +
        "to complete a job by using a consumable part and valid data on all the required " +
        "and additional fields.", SourceFile="Features\\Job Completion\\Job Completion - Break Fix Consumable Used via Mobile - F" +
        "ield Technician.feature", SourceLine=1)]
    public partial class JobCompletion_BreakFixConsumableUsedViaMobile_FieldTechnicianFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "AllTests",
                "BSuite",
                "Bsuite-Mobile",
                "Job-Completion",
                "Field-Technician"};
        
#line 1 "Job Completion - Break Fix Consumable Used via Mobile - Field Technician.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Job Completion", "Job Completion - Break Fix Consumable Used via Mobile - Field Technician", "\tAs a User with role Field Technician accessing BSuite Mobile portal,\r\nI am able " +
                    "to complete a job by using a consumable part and valid data on all the required " +
                    "and additional fields.", ProgrammingLanguage.CSharp, new string[] {
                        "AllTests",
                        "BSuite",
                        "Bsuite-Mobile",
                        "Job-Completion",
                        "Field-Technician"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void JobCompletion_BreakFixConsumableUsedViaMobile_FieldTechnician(string contract, string site, string app_StartTime, string app_StartHour, string app_StartMinute, string app_EndTime, string app_EndHour, string app_EndMinute, string position, string part, string partStatus, string priority, string problemCategory, string problemCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GSQA-42",
                    "PositiveTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Contract", contract);
            argumentsOfScenario.Add("Site", site);
            argumentsOfScenario.Add("App. Start Time", app_StartTime);
            argumentsOfScenario.Add("App. Start Hour", app_StartHour);
            argumentsOfScenario.Add("App. Start Minute", app_StartMinute);
            argumentsOfScenario.Add("App. End Time", app_EndTime);
            argumentsOfScenario.Add("App. End Hour", app_EndHour);
            argumentsOfScenario.Add("App. End Minute", app_EndMinute);
            argumentsOfScenario.Add("Position", position);
            argumentsOfScenario.Add("Part", part);
            argumentsOfScenario.Add("Part Status", partStatus);
            argumentsOfScenario.Add("Priority", priority);
            argumentsOfScenario.Add("Problem Category", problemCategory);
            argumentsOfScenario.Add("Problem Code", problemCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Job Completion - Break Fix Consumable Used via Mobile - Field Technician", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.Given("I have logged into BSuite \'Desktop\' portal as a User with role \'System Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.And("I have navigated to \'Call Centre\' page from the top menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table86.AddRow(new string[] {
                            "Contract/WorkType",
                            string.Format("{0}", contract)});
#line 13
 testRunner.And("I have navigated to \'Add Task\' page and entered details as follows", ((string)(null)), table86, "And ");
#line hidden
#line 16
 testRunner.And("I click the \'Add Task\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value/Action"});
                table87.AddRow(new string[] {
                            "Site",
                            string.Format("{0}", site)});
                table87.AddRow(new string[] {
                            "Contact",
                            "Sam1234"});
                table87.AddRow(new string[] {
                            "App. Start Time",
                            string.Format("{0}", app_StartTime)});
                table87.AddRow(new string[] {
                            "App. Start Hour",
                            string.Format("{0}", app_StartHour)});
                table87.AddRow(new string[] {
                            "App. Start Minute",
                            string.Format("{0}", app_StartMinute)});
                table87.AddRow(new string[] {
                            "App. End Time",
                            string.Format("{0}", app_EndTime)});
                table87.AddRow(new string[] {
                            "App. End Hour",
                            string.Format("{0}", app_EndHour)});
                table87.AddRow(new string[] {
                            "App. End Minute",
                            string.Format("{0}", app_EndMinute)});
                table87.AddRow(new string[] {
                            "Serial Number",
                            "GSQA170"});
                table87.AddRow(new string[] {
                            "Position",
                            string.Format("{0}", position)});
                table87.AddRow(new string[] {
                            "Part",
                            string.Format("{0}", part)});
                table87.AddRow(new string[] {
                            "Part Status",
                            string.Format("{0}", partStatus)});
                table87.AddRow(new string[] {
                            "Task Status",
                            "<Task Status>"});
                table87.AddRow(new string[] {
                            "Priority",
                            string.Format("{0}", priority)});
                table87.AddRow(new string[] {
                            "Client Ref #",
                            "GSQA170"});
                table87.AddRow(new string[] {
                            "Problem Category",
                            string.Format("{0}", problemCategory)});
                table87.AddRow(new string[] {
                            "Problem Code",
                            string.Format("{0}", problemCode)});
                table87.AddRow(new string[] {
                            "Problem Desc",
                            "GSQA 170 Reg Test"});
                table87.AddRow(new string[] {
                            "Client Notes",
                            "GSQA 170 Reg Test"});
                table87.AddRow(new string[] {
                            "Call Centre Notes",
                            "GSQA 170 Reg Test"});
#line 17
 testRunner.When("I enter the following details in the \'Add Task - FieldTask\' page", ((string)(null)), table87, "When ");
#line hidden
#line 39
 testRunner.And("I click the \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "Target",
                            "End Time"});
                table88.AddRow(new string[] {
                            "Creation Time",
                            "Current Time"});
                table88.AddRow(new string[] {
                            "TAKEN",
                            "Current Time + 0.5 hours"});
                table88.AddRow(new string[] {
                            "ONSITE",
                            "Current Time + 2 hours"});
                table88.AddRow(new string[] {
                            "CLOSED",
                            "Current Time + 14 hours"});
#line 40
 testRunner.Then("a new Field Task is saved with the following Client Targets", ((string)(null)), table88, "Then ");
#line hidden
#line 46
 testRunner.And("I fetch the task number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("I click the \'Finish\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.Then("I log off from Bsuite \'Desktop\' portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.Given("I have logged into BSuite \'Mobile\' portal as a User with role \'Field Technician\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
 testRunner.Then("I click the \'Task #\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.Then("I am required to select the created task using the task number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.Then("I click the \'Take Task\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
 testRunner.Then("I click the \'Update\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.And("I am required to change the Status to \'ONSITE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("I have clicked \'Update\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("I have clicked \'Continue\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table89.AddRow(new string[] {
                            "1",
                            "Is this a multi person job?"});
#line 62
 testRunner.Then("The \'first\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table89, "Then ");
#line hidden
#line 65
 testRunner.When("I respond \'No\' to the \'first\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table90.AddRow(new string[] {
                            "2",
                            "I am clear on what the job is?"});
#line 66
 testRunner.Then("The \'second\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table90, "Then ");
#line hidden
#line 69
 testRunner.When("I respond \'Yes\' to the \'second\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table91.AddRow(new string[] {
                            "3",
                            "I have the required skills, training, and licences for the task?"});
#line 70
 testRunner.Then("The \'third\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table91, "Then ");
#line hidden
#line 73
 testRunner.When("I respond \'Yes\' to the \'third\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table92.AddRow(new string[] {
                            "4",
                            "I have reviewed the Safe Work Procedures for the task."});
#line 74
 testRunner.Then("The \'fourth\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table92, "Then ");
#line hidden
#line 77
 testRunner.When("I respond \'Yes\' to the \'fourth\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table93.AddRow(new string[] {
                            "5",
                            "I have the correct tools and equipment and tools are correct and in good order."});
#line 78
 testRunner.Then("The \'fifth\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table93, "Then ");
#line hidden
#line 81
 testRunner.When("I respond \'Yes\' to the \'fifth\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table94.AddRow(new string[] {
                            "7",
                            "Look for Unidentified Hazards"});
#line 82
 testRunner.Then("The \'seventh\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table94, "Then ");
#line hidden
#line 85
 testRunner.When("I respond \'No\' to the \'seventh\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.Then("the Submit button is enabled for MySlamAssessment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
 testRunner.And("I click the \'Submit\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("I select the \'Add Action\' drop down value as \'REPLACED\' in \'Work Log for Field Ta" +
                        "sk\' page on Mobile portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("I have clicked \'Next »\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("I have entered Part Number \'1000041\' under \'Part In - Part No\' and clicked on \'Pa" +
                        "rt In - Search\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.And("I select the Part Number \'1000041\' in Search Part page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.And("I have entered Part Number \'1000041\' under \'Part Out - Part No\' and clicked on \'P" +
                        "art Out - Search\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.And("I select the Part Number \'1000041\' in Search Part page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
 testRunner.And("I enter Part Fault Description \'Part Fault Description for Workshop\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.And("I have clicked \'AddAction\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.And("I have clicked \'Close Work Log\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.And("I select the \'Cause Category\' drop down value as \'CC625-ALH Cisco Bank Switch\' in" +
                        " \'Please Select Cause Category\' page on Mobile portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
 testRunner.And("I select the \'Cause Category Details\' drop down value as \'Unknown\' in \'Please Sel" +
                        "ect Cause Category\' page on Mobile portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.And("I have clicked \'Save\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.And("I click Close Work Log button and Cancel on \'Do You Want to Change Cause Category" +
                        "?\' pop up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And("I have clicked \'Update\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.And("I click the \'Update\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And("I am required to change the Status to \'CLOSED\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.And("I have clicked \'Update\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.And("I click the \'« Back to Task List\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.And("I click the \'Past Actioned\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.And("Status of task updated as \'COM\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Job Completion - Break Fix Consumable Used via Mobile - Field Technician, ALH Gro" +
            "up - IT Support - Break Fix", new string[] {
                "GSQA-42",
                "PositiveTests"}, SourceLine=113)]
        public virtual void JobCompletion_BreakFixConsumableUsedViaMobile_FieldTechnician_ALHGroup_ITSupport_BreakFix()
        {
#line 7
this.JobCompletion_BreakFixConsumableUsedViaMobile_FieldTechnician("ALH Group - IT Support - Break Fix", "688", "2021-11-17", "02", "00", "2021-11-17", "02", "30", "1", "1000041", "Degraded", "1", "Unknown", "Unknown", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
