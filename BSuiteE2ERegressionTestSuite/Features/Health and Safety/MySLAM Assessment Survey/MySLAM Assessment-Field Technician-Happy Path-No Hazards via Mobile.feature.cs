// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BSuiteE2ERegressionTestSuite.Features.HealthAndSafety.MySLAMAssessmentSurvey
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Health and Safety - MySLAM Assessment - Field Technician - Happy Path - No Hazard" +
        "s via Mobile", new string[] {
            "AllTests",
            "BSuite",
            "HealthAndSafety",
            "MySlamAssessment"}, SourceFile="Features\\Health and Safety\\MySLAM Assessment Survey\\MySLAM Assessment-Field Techn" +
        "ician-Happy Path-No Hazards via Mobile.feature", SourceLine=1)]
    public partial class HealthAndSafety_MySLAMAssessment_FieldTechnician_HappyPath_NoHazardsViaMobileFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "AllTests",
                "BSuite",
                "HealthAndSafety",
                "MySlamAssessment"};
        
#line 1 "MySLAM Assessment-Field Technician-Happy Path-No Hazards via Mobile.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Health and Safety/MySLAM Assessment Survey", "Health and Safety - MySLAM Assessment - Field Technician - Happy Path - No Hazard" +
                    "s via Mobile", null, ProgrammingLanguage.CSharp, new string[] {
                        "AllTests",
                        "BSuite",
                        "HealthAndSafety",
                        "MySlamAssessment"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void HealthAndSafety_MySLAMAssessment_FieldTechnician_HappyPath_NoHazardsViaMobile(string contract, string site, string app_StartTime, string app_StartHour, string app_StartMinute, string app_EndTime, string app_EndHour, string app_EndMinute, string position, string part, string partStatus, string priority, string problemCategory, string problemCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BSuite",
                    "BSuite-Mobile",
                    "Field-Technician",
                    "GSQA-170"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Contract", contract);
            argumentsOfScenario.Add("Site", site);
            argumentsOfScenario.Add("App. Start Time", app_StartTime);
            argumentsOfScenario.Add("App. Start Hour", app_StartHour);
            argumentsOfScenario.Add("App. Start Minute", app_StartMinute);
            argumentsOfScenario.Add("App. End Time", app_EndTime);
            argumentsOfScenario.Add("App. End Hour", app_EndHour);
            argumentsOfScenario.Add("App. End Minute", app_EndMinute);
            argumentsOfScenario.Add("Position", position);
            argumentsOfScenario.Add("Part", part);
            argumentsOfScenario.Add("Part Status", partStatus);
            argumentsOfScenario.Add("Priority", priority);
            argumentsOfScenario.Add("Problem Category", problemCategory);
            argumentsOfScenario.Add("Problem Code", problemCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Health and Safety - MySLAM Assessment - Field Technician - Happy Path - No Hazard" +
                    "s via Mobile", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
 testRunner.Given("I have logged into BSuite \'Desktop\' portal as a User with role \'System Admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
 testRunner.And("I have navigated to \'Call Centre\' page from the top menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "Contract/WorkType",
                            string.Format("{0}", contract)});
#line 12
 testRunner.And("I have navigated to \'Add Task\' page and entered details as follows", ((string)(null)), table1, "And ");
#line hidden
#line 15
 testRunner.And("I click the \'Add Task\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value/Action"});
                table2.AddRow(new string[] {
                            "Site",
                            string.Format("{0}", site)});
                table2.AddRow(new string[] {
                            "Contact",
                            "Sam1234"});
                table2.AddRow(new string[] {
                            "App. Start Time",
                            string.Format("{0}", app_StartTime)});
                table2.AddRow(new string[] {
                            "App. Start Hour",
                            string.Format("{0}", app_StartHour)});
                table2.AddRow(new string[] {
                            "App. Start Minute",
                            string.Format("{0}", app_StartMinute)});
                table2.AddRow(new string[] {
                            "App. End Time",
                            string.Format("{0}", app_EndTime)});
                table2.AddRow(new string[] {
                            "App. End Hour",
                            string.Format("{0}", app_EndHour)});
                table2.AddRow(new string[] {
                            "App. End Minute",
                            string.Format("{0}", app_EndMinute)});
                table2.AddRow(new string[] {
                            "Serial Number",
                            "GSQA170"});
                table2.AddRow(new string[] {
                            "Position",
                            string.Format("{0}", position)});
                table2.AddRow(new string[] {
                            "Part",
                            string.Format("{0}", part)});
                table2.AddRow(new string[] {
                            "Part Status",
                            string.Format("{0}", partStatus)});
                table2.AddRow(new string[] {
                            "Task Status",
                            "<Task Status>"});
                table2.AddRow(new string[] {
                            "Priority",
                            string.Format("{0}", priority)});
                table2.AddRow(new string[] {
                            "Client Ref #",
                            "GSQA170"});
                table2.AddRow(new string[] {
                            "Problem Category",
                            string.Format("{0}", problemCategory)});
                table2.AddRow(new string[] {
                            "Problem Code",
                            string.Format("{0}", problemCode)});
                table2.AddRow(new string[] {
                            "Problem Desc",
                            "GSQA 170 Reg Test"});
                table2.AddRow(new string[] {
                            "Client Notes",
                            "GSQA 170 Reg Test"});
                table2.AddRow(new string[] {
                            "Call Centre Notes",
                            "GSQA 170 Reg Test"});
#line 16
 testRunner.When("I enter the following details in the \'Add Task - FieldTask\' page", ((string)(null)), table2, "When ");
#line hidden
#line 38
 testRunner.And("I click the \'Save\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Target",
                            "End Time"});
                table3.AddRow(new string[] {
                            "Creation Time",
                            "Current Time"});
                table3.AddRow(new string[] {
                            "TAKEN",
                            "Current Time + 0.5 hours"});
                table3.AddRow(new string[] {
                            "ONSITE",
                            "Current Time + 2 hours"});
                table3.AddRow(new string[] {
                            "CLOSED",
                            "Current Time + 14 hours"});
#line 39
 testRunner.Then("a new Field Task is saved with the following Client Targets", ((string)(null)), table3, "Then ");
#line hidden
#line 45
 testRunner.And("I fetch the task number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("I click the \'Finish\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Then("I log off from Bsuite \'Desktop\' portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.When("I have opened the BSuite Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Given("I have logged into BSuite \'Mobile\' portal as a User with role \'Field Technician\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
 testRunner.Then("I click on \'Task #\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.Then("I am required to select the created task using the task number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.Then("I click on \'Take Task\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.Then("I click on \'Update\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.And("I am required to change the Status to \'ONSITE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.When("I have clicked \'Update\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.And("I have clicked \'Continue\' button on Mobile Portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table4.AddRow(new string[] {
                            "1",
                            "Is this a multi person job?"});
#line 60
 testRunner.Then("The \'first\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table4, "Then ");
#line hidden
#line 63
 testRunner.When("I respond \'No\' to the \'first\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table5.AddRow(new string[] {
                            "2",
                            "I am clear on what the job is?"});
#line 64
 testRunner.Then("The \'second\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table5, "Then ");
#line hidden
#line 67
 testRunner.When("I respond \'Yes\' to the \'second\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table6.AddRow(new string[] {
                            "3",
                            "I have the required skills, training, and licences for the task?"});
#line 68
 testRunner.Then("The \'third\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table6, "Then ");
#line hidden
#line 71
 testRunner.When("I respond \'Yes\' to the \'third\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table7.AddRow(new string[] {
                            "4",
                            "I have reviewed the Safe Work Procedures for the task."});
#line 72
 testRunner.Then("The \'fourth\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table7, "Then ");
#line hidden
#line 75
 testRunner.When("I respond \'Yes\' to the \'fourth\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table8.AddRow(new string[] {
                            "5",
                            "I have the correct tools and equipment and tools are correct and in good order."});
#line 76
 testRunner.Then("The \'fifth\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table8, "Then ");
#line hidden
#line 79
 testRunner.When("I respond \'Yes\' to the \'fifth\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Number",
                            "Question"});
                table9.AddRow(new string[] {
                            "7",
                            "Look for Unidentified Hazards"});
#line 80
 testRunner.Then("The \'seventh\' Question Of The My Slam Assessment Is Displayed As Follows", ((string)(null)), table9, "Then ");
#line hidden
#line 83
 testRunner.When("I respond \'No\' to the \'seventh\' My Slam Assessment question", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
 testRunner.Then("the Submit button is enabled for MySlamAssessment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
 testRunner.And("I click the \'Submit\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.Then("I click on \'Task List\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
 testRunner.And("I am required to select the created task using the task number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("I verify the task status as \'ONSITE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Health and Safety - MySLAM Assessment - Field Technician - Happy Path - No Hazard" +
            "s via Mobile, QLD Pokies - PM", new string[] {
                "BSuite",
                "BSuite-Mobile",
                "Field-Technician",
                "GSQA-170"}, SourceLine=91)]
        public virtual void HealthAndSafety_MySLAMAssessment_FieldTechnician_HappyPath_NoHazardsViaMobile_QLDPokies_PM()
        {
#line 6
this.HealthAndSafety_MySLAMAssessment_FieldTechnician_HappyPath_NoHazardsViaMobile("QLD Pokies - PM", "688", "2021-11-17", "02", "00", "2021-11-17", "02", "30", "1", "1000041", "Degraded", "31", "Unknown", "Unknown", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
